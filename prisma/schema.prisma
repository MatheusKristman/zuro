// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PaymentPreference {
  before_after
  before
  after
}

enum DayOff {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

enum Days {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

enum ScheduleStatus {
  confirmed
  cancelled
}

model User {
  id                     String             @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?            @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  role                   Role               @default(USER)
  firstAccess            Boolean            @default(false)
  firstConfigurationStep Int                @default(0)
  paymentPreference      PaymentPreference?
  pixKey                 String?
  dayOff                 DayOff[]
  confirmationPassword   String?

  accounts     Account[]
  sessions     Session[]
  availability Availability[]
  services     Service[]
  schedules    Schedule[]

  planId String? @db.ObjectId
  plan   Plan?   @relation(fields: [planId], references: [id])

  subscription Subscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.ObjectId
  access_token      String? @db.ObjectId
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Availability {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  dayOfWeek      Days
  availableTimes AvailableTimes[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Service {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  minutes   Int
  price     Float
  schedules Schedule[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Schedule {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  date          String
  time          String
  fullName      String
  email         String
  tel           String
  message       String?
  paymentMethod PaymentPreference
  receiptUrl    String?
  status        ScheduleStatus    @default(confirmed)

  serviceId String  @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AvailableTimes {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  startTime String
  endTime   String

  availabilityId String       @db.ObjectId
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
}

model PrimaryColor {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  colorCode String
}

model Plan {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  priceId   String
  productId String

  users         User[]
  subscriptions Subscription[]
}

model Subscription {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  stripeSubscriptionId String @unique

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId String @db.ObjectId
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
